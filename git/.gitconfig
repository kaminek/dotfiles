[user]
        email = kaminek92@gmail.com
        name = Amine Kherbouche

# Override email with company's one
[includeIf "gitdir:~/work/pro/"]
        path = ~/work/pro/.gitconfig-pro

[sendemail]
        smtpuser = kaminek92@gmail.com
        smtpencryption = ssl
        smtpserver = smtp.gmail.com
        smtpserverport = 465
        suppressfrom = true
        chainreplyto = false
        confirm = always
        envelopesender = auto
        suppresscc = self

[color]
        ui = auto

[color "branch"]
        current = yellow bold
        local = green bold
        remote = cyan bold

[color "diff"]
        meta = yellow bold
        frag = magenta bold
        old = red
        new = green
        whitespace = red reverse

[color "diff-highlight"]
        meta = yellow bold
        oldNormal = red bold
        oldHighlight = red bold 52
        newNormal = green bold
        newHighlight = green bold 22

[color "grep"]
	filename = magenta

[color "status"]
        added = green bold
        changed = yellow bold
        untracked = red bold

[diff]
        # Detect copies as well as renames
        renames = copies

[diff "bin"]
        # Use `hexdump` to diff binary files
        textconv = hexdump -v -C

[help]
        # Automatically correct and execute mistyped commands
        autocorrect = 1

[apply]
        # Detect whitespace errors when applying a patch
        whitespace = fix

[core]
        editor = nvim
        # Treat spaces before tabs and all kinds of trailing whitespace as an
        # error
        whitespace = space-before-tab,-indent-with-non-tab,trailing-space
        # Prevent showing files whose names contain non-ASCII symbols as
        # unversioned.
        precomposeunicode = false

[pager]
    diff = delta
    show = delta
    log = delta
    blame = delta
    reflog = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    features = decorations line-numbers
    whitespace-error-style = 22 reverse
    syntax-theme = Monokai Extended
    ; syntax-theme = Dracula
    plus-style = syntax "#003800"
    minus-style = syntax "#3f0001"

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none
    hunk-header-decoration-style = cyan box ul

[delta "line-numbers"]
    line-numbers-left-style = cyan
    line-numbers-right-style = cyan
    line-numbers-minus-style = 124
    line-numbers-plus-style = 28

; [delta "unobtrusive-line-numbers"]
;     line-numbers = true
;     line-numbers-minus-style = "#444444"
;     line-numbers-zero-style = "#444444"
;     line-numbers-plus-style = "#444444"
;     line-numbers-left-format = "{nm:>4}┊"
;     line-numbers-right-format = "{np:>4}│"
;     line-numbers-left-style = blue
;     line-numbers-right-style = blue

; [delta "decorations"]
;     commit-decoration-style = bold yellow box ul
;     file-style = bold yellow ul
;     file-decoration-style = none
;         hunk-header-decoration-style = yellow box

[pretty]
        fixes = "Fixes: %h (%s)"
        full-line = "%C(red)(%><(10)%cr)%C(reset) | %Cgreen%><(15,trunc)%an%C(reset) | %C(yellow)%h%C(reset) |%C(auto)%d%C(reset) %s - %C(cyan)%ai%C(reset)"
        alt-full-line = "%C(cyan)%ad%Creset %Cred(%><(15)%cr)%Creset - %Cgreen%><(21,trunc)%an%Creset - %C(yellow)%h%Creset - %<(80,trunc)%s%C(auto)%d%Creset"

[alias]
        # View abbreviated SHA, description, and history graph of the latest 20
        # commits
        lg = log --pretty=oneline -n 20 --graph --abbrev-commit
        l = log --pretty=full-line --date=short
        fixes = log --abbrev=12 --pretty=fixes
        graph = log --graph --decorate --pretty=oneline --abbrev-commit
        tree = log --graph --decorate --pretty=oneline --abbrev-commit --all

        # View the current working tree status using the short format
        s = status --short --branch

        # Diff so fancy
        d = "!f() { [ -z "$GIT_PREFIX" ] || cd "$GIT_PREFIX" && git diff --color "$@"; }; f"

        # Show the staged mod diff
        ds = "!f() { [ -z "$GIT_PREFIX" ] || cd "$GIT_PREFIX" && git diff --staged --color "$@"; }; f"

        # `git di $number` shows the diff between the state `$number` revisions
        # ago and the current state
        di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

        # Pull in remote changes for the current repository and all its
        # submodules
        p = !"git pull; git submodule foreach git pull origin master"

        # push last tag
        push-tag = !git push origin $(git describe --abbrev=0)

        # Clone a repository including all submodules
        c = clone --recursive

        # Commit all changes
        ca = !git add -A && git commit -avs

        # Switch to a branch, creating it if necessary
        go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

        # Show verbose output about tags, branches or remotes
        tags = tag -l
        branches = branch -a
        remotes = remote -v

        # Amend the currently staged files to the latest commit
        amend = commit --amend --reuse-message=HEAD

        # Credit an author on the latest commit
        credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

        # Interactive rebase with the given number of latest commits
        reb = "!r() { git rebase -i HEAD~$1; }; r"

        # Iteractive rebase
        ri = rebase -i

        # rebase continue
        rc = rebase --continue

        # rebase abort
        ra = rebase --abort

        # Remove the old tag with this name and tag the latest commit with it.
        retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

        # Find branches containing commit
        fb = "!f() { git branch -a --contains $1; }; f"

        # Find tags containing commit
        ft = "!f() { git describe --always --contains $1; }; f"

        # Find commits by source code
        fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

        # Find commits by commit message
        fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

        hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
        type = cat-file -t
        dump = cat-file -p

[log]
        decorate = true

[pull]
        rebase = true

[push]
        default = nothing

[url "git@github.com:"]
    insteadOf = https://github.com/

# Use custom config for this github organization
# Configure ssh with:
# #Host github-pro
# #    HostName github.com
# #    IdentityFile ~/.ssh/id_rsa # custom ssh key for this orga
[url "git@github-pro:ebuzzing"]
    insteadOf = https://github.com/ebuzzing

[url "git@github-pro:ebuzzing"]
    insteadOf = git@github.com:ebuzzing
